# File: layer4_lib.def
Bootstrap: localimage
From: layer3_mpi.sif

%help
    Einstein Toolkit Container --- Layer 4/5 --- External Libraries

    This layer installs the following external libraries in FALCON_ROOT:
      - OpenBLAS
      - HDF5
      - FFTW3
      - GSL
      - LORENE

    We do the installation above manually because:
      - HDF5 depends on MPI, so it must be built after layers 2 and 3;
      - LORENE depends on GSL and FFTW3, so we must build those beforehand; and
      - GSL and the Einstein Toolkit require BLAS, so we provide build the
        high-performance library OpenBLAS.

%labels
    Author(s)  Leo Werneck <wernecklr@gmail.com>
    Version    1.0
    Layer      4/5

%post
    set -e

    cat << 'EOF' >> /env.sh

# Library Versions
export FALCON_OPENBLAS_VERSION=0.3.30
export FALCON_HDF5_VERSION=1.14.6
export FALCON_FFTW_VERSION=3.3.10
export FALCON_GSL_VERSION=2.8

# Lorene directory
export HOME_LORENE=${FALCON_ROOT}/Lorene

# Additional versioning required by HDF5
FALCON_HDF5_VERSION_UND=$(echo "$FALCON_HDF5_VERSION" | tr . _)
FALCON_HDF5_VERSION_MAJOR_UND=$(echo "$FALCON_HDF5_VERSION_UND" | cut -d_ -f1,2)
EOF

    # Reload the updated environment
    . /env.sh

    ############
    # OpenBLAS #
    ############
    download_unpack_and_cd OpenBLAS-${FALCON_OPENBLAS_VERSION}

    make -j8 DYNAMIC_ARCH=1 USE_OPENMP=1 && make PREFIX=${FALCON_ROOT} install

    clean OpenBLAS-${FALCON_OPENBLAS_VERSION}

    ########
    # HDF5 #
    ########
    download_unpack_and_cd hdf5-${FALCON_HDF5_VERSION}

    ./configure                        \
        --prefix=${FALCON_ROOT}        \
        --enable-fortran               \
        --enable-cxx                   \
        --enable-shared                \
        --enable-static                \
        --with-zlib=yes                \
        --enable-build-mode=production \
        CC=mpicc                       \
        CXX=mpicxx                     \
        FC=mpif90
    make -j8 && make install

    clean hdf5-${FALCON_HDF5_VERSION}

    ########
    # FFTW #
    ########
    download_unpack_and_cd fftw-${FALCON_FFTW_VERSION}

    ./configure                 \
        --prefix=${FALCON_ROOT} \
        --enable-shared         \
        --enable-threads        \
        --enable-openmp         \
        --enable-sse2           \
        --enable-avx            \
        --enable-avx2           \
        --enable-avx512         \
        --enable-fma            \
        --enable-mpi            \
        CC=mpicc
    make -j8 && make install

    clean fftw-${FALCON_FFTW_VERSION}

    #######
    # GSL #
    #######
    download_unpack_and_cd gsl-${FALCON_GSL_VERSION}

    ./configure                                       \
        --prefix=${FALCON_ROOT}                       \
        --enable-shared                               \
        --disable-static                              \
        --with-blas=${FALCON_ROOT}/lib/libopenblas.so \
        LDFLAGS="-fopenmp"                            \
        CFLAGS="-O3 -fPIC -march=native -fopenmp"
    make -j8 && make install

    clean gsl-${FALCON_GSL_VERSION}

    ##########
    # LORENE #
    ##########
    download_unpack_and_cd Lorene
    cd / && mv /Lorene $HOME_LORENE && cd $HOME_LORENE

    echo "# Lorene configuration
CXX        = g++
F77        = gfortran
CXXFLAGS   = -O2 -fopenmp -march=native -std=c++17 -rdynamic -DNDEBUG
CXXFLAGS_G = -O2 -fopenmp -march=native -std=c++17 -rdynamic
F77FLAGS   = -O2 -fopenmp -march=native -fcray-pointer -ffixed-line-length-none -fno-range-check -DNDEBUG
F77FLAGS_G = -O2 -fopenmp -march=native -fcray-pointer -ffixed-line-length-none -fno-range-check
INC        = -I${HOME_LORENE}/C++/Include -I${HOME_LORENE}/C++/Include_extra
RANLIB     = ls
MAKEDEPEND = : > \$(df).d
DEPDIR     = .deps
FFT_DIR    = FFTW3
LIB_CXX    = -lfftw3_omp -lgfortran -lstdc++ -lm
LIB_LAPACK = -lopenblas
LIB_GSL    = -lgsl -lopenblas
LIB_PGPLOT =
" > local_settings

    make fortran
    make export -j8
    make cpp -j8

%environment
    . /env.sh
